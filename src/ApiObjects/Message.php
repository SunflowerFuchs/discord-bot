<?php


namespace SunflowerFuchs\DiscordBot\ApiObjects;

use SunflowerFuchs\DiscordBot\Helpers\ComponentFactory;

/**
 * @TODO: add docblock comments
 */
class Message
{
    const TYPE_DEFAULT = 0;
    const TYPE_RECIPIENT_ADD = 1;
    const TYPE_RECIPIENT_REMOVE = 2;
    const TYPE_CALL = 3;
    const TYPE_CHANNEL_NAME_CHANGE = 4;
    const TYPE_CHANNEL_ICON_CHANGE = 5;
    const TYPE_CHANNEL_PINNED_MESSAGE = 6;
    const TYPE_GUILD_MEMBER_JOIN = 7;
    const TYPE_USER_PREMIUM_GUILD_SUBSCRIPTION = 8;
    const TYPE_USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_1 = 9;
    const TYPE_USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_2 = 10;
    const TYPE_USER_PREMIUM_GUILD_SUBSCRIPTION_TIER_3 = 11;
    const TYPE_CHANNEL_FOLLOW_ADD = 12;
    const TYPE_GUILD_DISCOVERY_DISQUALIFIED = 14;
    const TYPE_GUILD_DISCOVERY_REQUALIFIED = 15;
    const TYPE_REPLY = 19;
    const TYPE_APPLICATION_COMMAND = 20;
    const TYPE_THREAD_STARTER_MESSAGE = 21;
    const TYPE_GUILD_INVITE_REMINDER = 22;

    /**
     * this message has been published to subscribed channels (via Channel Following)
     */
    const FLAG_CROSSPOSTED = 1 << 0;
    /**
     * this message originated from a message in another channel (via Channel Following)
     */
    const FLAG_IS_CROSSPOST = 1 << 1;
    /**
     * do not include any embeds when serializing this message
     */
    const FLAG_SUPPRESS_EMBEDS = 1 << 2;
    /**
     * the source message for this crosspost has been deleted (via Channel Following)
     */
    const FLAG_SOURCE_MESSAGE_DELETED = 1 << 3;
    /**
     * this message came from the urgent message system
     */
    const FLAG_URGENT = 1 << 4;

    /**
     * id of the message
     */
    protected Snowflake $id;
    /**
     * id of the channel the message was sent in
     */
    protected Snowflake $channel_id;
    /**
     * id of the guild the message was sent in
     */
    protected ?Snowflake $guild_id;
    /**
     * the author of this message (not guaranteed to be a valid user, see below)
     */
    protected User $author;
    /**
     * member properties for this message's author
     */
    protected ?GuildMember $member;
    /**
     * contents of the message
     */
    protected string $content;
    /**
     * when this message was sent
     */
    protected int $timestamp;
    /**
     * when this message was edited (or null if never)
     */
    protected ?int $edited_timestamp;
    /**
     * whether this was a TTS message
     */
    protected bool $tts;
    /**
     * whether this message mentions everyone
     */
    protected bool $mention_everyone;
    /**
     * users specifically mentioned in the message
     * with an additional partial member field
     * @var User[] $mentions
     */
    protected array $mentions;
    /**
     * roles specifically mentioned in this message'
     * @var Snowflake[] $mention_roles
     */
    protected array $mention_roles;
    /**
     * channels specifically mentioned in this message
     * @var Mention[] $mention_channels
     */
    protected array $mention_channels;
    /**
     * any attached files
     * @var Attachment[]
     */
    protected array $attachments;
    /**
     * any embedded content
     * @var Embed[] $embeds
     */
    protected array $embeds;
    /**
     * reactions to the message
     * @var Reaction[] $reactions
     */
    protected array $reactions;
    /**
     * used for validating a message was sent
     */
    protected ?string $nonce;
    /**
     * whether this message is pinned
     */
    protected bool $pinned;
    /**
     * if the message is generated by a webhook, this is the webhook's id
     */
    protected ?Snowflake $webhook_id;
    /**
     * type of message
     */
    protected int $type;
    /**
     * activity, sent with Rich Presence-related chat embeds
     */
    protected ?MessageActivity $activity;
    /**
     * sent with Rich Presence-related chat embeds
     */
    protected ?MessageApplication $application;
    /**
     * reference data sent with crossposted messages and replies
     */
    protected ?MessageReference $message_reference;
    /**
     * message flags combined as a bitfield
     */
    protected int $flags;
    /**
     * the message associated with the message_reference
     */
    protected ?Message $referenced_message;
    /**
     * sent if the message is a response to an Interaction
     */
    protected ?Interaction $interaction;
    /**
     * the thread that was started from this message, includes thread member object
     */
    protected ?Channel $thread;
    /**
     * sent if the message contains components like buttons, action rows, or other interactive components
     * @var Component[]
     */
    protected array $components;
    /**
     * the stickers sent with the message (bots currently can only receive messages with stickers, not send)
     * @var StickerItem[] $sticker_items
     */
    protected ?array $sticker_items;

    public function __construct(array $data)
    {
        $this->id = new Snowflake($data['id']);
        $this->channel_id = new Snowflake($data['channel_id']);
        $this->guild_id = !empty($data['guild_id']) ? new Snowflake($data['guild_id']) : null;
        $this->author = new User($data['author']);
        $this->member = !empty($data['member']) ? new GuildMember($data['member']) : null;
        $this->content = trim($data['content']);
        $this->timestamp = strtotime($data['timestamp']);
        $this->edited_timestamp = !empty($data['edited_timestamp']) ? strtotime($data['edited_timestamp']) : null;
        $this->tts = $data['tts'] ?? false;
        $this->mention_everyone = $data['mention_everyone'] ?? false;
        $this->nonce = $data['nonce'] ?? null;
        $this->pinned = $data['pinned'] ?? false;
        $this->webhook_id = !empty($data['webhook_id']) ? new Snowflake($data['webhook_id']) : null;
        $this->type = $data['type'];
        $this->activity = !empty($data['activity']) ? new MessageActivity($data['activity']) : null;
        $this->application = !empty($data['application']) ? new MessageApplication($data['application']) : null;
        $this->message_reference = !empty($data['message_reference']) ? new MessageReference($data['message_reference']) : null;
        $this->flags = $data['flags'] ?? 0;
        $this->referenced_message = !empty($data['referenced_message']) ? new static($data['referenced_message']) : null;
        $this->interaction = !empty($data['interaction']) ? new Interaction($data['interaction']) : null;
        $this->thread = !empty($data['thread']) ? new Channel($data['thread']) : null;

        $this->mentions = array_map(fn($user) => new User($user), $data['mentions']);
        $this->mention_roles = array_map(fn($snowflake) => new Snowflake($snowflake), $data['mention_roles']);
        $this->mention_channels = array_map(fn($mention) => new Mention($mention), $data['mention_channels'] ?? []);
        $this->attachments = array_map(fn($attachment) => new Attachment($attachment), $data['attachments']);
        $this->reactions = array_map(fn($reaction) => new Reaction($reaction), $data['reactions'] ?? []);
        $this->sticker_items = array_map(fn($sticker_item) => new StickerItem($sticker_item),
            $data['sticker_items'] ?? []);
        $this->embeds = array_map(fn($embed) => new Embed($embed), $data['embeds'] ?? []);
        $this->components = array_map(fn($component) => ComponentFactory::factory($component),
            $data['components'] ?? []);
    }

    /**
     * id of the message
     * @return Snowflake
     */
    public function getId(): Snowflake
    {
        return $this->id;
    }

    /**
     * id of the channel this message was sent in
     * @return Snowflake
     */
    public function getChannelId(): Snowflake
    {
        return $this->channel_id;
    }

    /**
     * id of the guild this message was sent in
     * @return ?Snowflake
     */
    public function getGuildId(): ?Snowflake
    {
        return $this->guild_id;
    }

    /**
     * the author of the message (might not be a full user object, see {@see Message::isUserMessage()}
     * @return User
     */
    public function getAuthor(): User
    {
        return $this->author;
    }

    /**
     * @return ?GuildMember
     */
    public function getMember(): ?GuildMember
    {
        return $this->member;
    }

    /**
     * Returns the full message contents
     *
     * @return string
     */
    public function getContent(): string
    {
        return $this->content;
    }

    /**
     * Whether the message seems to be a command (starts with the bot prefix)
     *
     * @param string $prefix
     *
     * @return bool
     */
    public function isCommand(string $prefix): bool
    {
        $content = $this->getContent();
        $prefixLength = strlen($prefix);
        return $this->isUserMessage()
            && substr($content, 0, $prefixLength) === $prefix
            && strlen($content) > $prefixLength;
    }

    /**
     * If this is a command, returns the command name after the prefix
     *
     * @param string $prefix
     *
     * @return ?string
     */
    public function getCommand(string $prefix): string
    {
        if (!$this->isCommand($prefix)) {
            return '';
        }
        return substr(explode(' ', $this->getContent())[0], strlen($prefix));
    }

    /**
     * If this is a command, returns the parameters this command received
     *
     * @param string $prefix
     *
     * @return string[]
     */
    public function getCommandParams(string $prefix): array
    {
        if (!$this->isCommand($prefix)) {
            return [];
        }
        $params = explode(' ', $this->getContent());
        array_shift($params);
        return $params;
    }

    /**
     * @return int
     */
    public function getTimestamp(): int
    {
        return $this->timestamp;
    }

    /**
     * @return ?int
     */
    public function getEditedTimestamp(): ?int
    {
        return $this->edited_timestamp;
    }

    /**
     * @return bool
     */
    public function isTts(): bool
    {
        return $this->tts;
    }

    /**
     * @return bool
     */
    public function isMentionEveryone(): bool
    {
        return $this->mention_everyone;
    }

    /**
     * @return User[]
     */
    public function getMentions(): array
    {
        return $this->mentions;
    }

    /**
     * @return Snowflake[]
     */
    public function getMentionRoles(): array
    {
        return $this->mention_roles;
    }

    /**
     * @return Mention[]
     */
    public function getMentionChannels(): ?array
    {
        return $this->mention_channels;
    }

    /**
     * @return Attachment[]
     */
    public function getAttachments(): array
    {
        return $this->attachments;
    }

    /**
     * @return ?string
     */
    public function getNonce(): ?string
    {
        return $this->nonce;
    }

    /**
     * @return bool
     */
    public function isPinned(): bool
    {
        return $this->pinned;
    }

    /**
     * @return ?Snowflake
     */
    public function getWebhookId(): ?Snowflake
    {
        return $this->webhook_id;
    }

    /**
     * Returns whether the message was sent by a regular user
     *
     * @return bool
     */
    public function isUserMessage(): bool
    {
        return $this->getWebhookId() === null;
    }

    /**
     * @return int
     */
    public function getType(): int
    {
        return $this->type;
    }

    /**
     * Returns whether the message is either a regular message or a reply
     *
     * @return bool
     */
    public function isTextMessage(): bool
    {
        return $this->getType() === static::TYPE_DEFAULT
            || $this->getType() === static::TYPE_REPLY
            || $this->getType() === static::TYPE_THREAD_STARTER_MESSAGE;
    }

    /**
     * @return ?MessageActivity
     */
    public function getActivity(): ?MessageActivity
    {
        return $this->activity;
    }

    /**
     * @return ?MessageApplication
     */
    public function getApplication(): ?MessageApplication
    {
        return $this->application;
    }

    /**
     * @return ?MessageReference
     */
    public function getMessageReference(): ?MessageReference
    {
        return $this->message_reference;
    }

    /**
     * the thread that was started from this message, includes thread member object
     */
    public function getThread(): ?Channel
    {
        return $this->thread;
    }

    /**
     * @return ?int
     */
    public function getFlags(): ?int
    {
        return $this->flags;
    }

    /**
     * If this is a reply, this is the replied to message
     * @return ?Message
     */
    public function getReferencedMessage(): ?Message
    {
        return $this->referenced_message;
    }

    /**
     * @TODO: implement Embeds
     * @return Embed[]
     */
    public function getEmbeds(): array
    {
        return $this->embeds;
    }

    /**
     * @TODO: implement Reactions
     * @return Reaction[]
     */
    public function getReactions(): ?array
    {
        return $this->reactions;
    }

    /**
     * @TODO: implement Stickers
     * @return Sticker[]
     */
    public function getStickerItems(): ?array
    {
        return $this->sticker_items;
    }
}